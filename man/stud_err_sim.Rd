% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/quantile.R
\name{stud_err_sim}
\alias{stud_err_sim}
\title{Simulation draws of studentized error}
\usage{
stud_err_sim(
  y.1,
  y.0,
  x.1,
  x.0,
  w.1,
  w.0,
  T.grad,
  deg,
  kern,
  z.1,
  z.0,
  resid.1 = NULL,
  resid.0 = NULL
)
}
\arguments{
\item{y.1}{dependent variable for treated observation; possibly a matrix with \code{nrow} equals the sample size}

\item{y.0}{dependent variable for control observation; possibly a matrix with \code{nrow} equals the sample size}

\item{x.1}{a vector of regressor for treated observation}

\item{x.0}{a vector of regressor for control observation}

\item{w.1}{A \code{n_1} by \code{k} dimensional matrix of weight values corresponding to treated observations}

\item{w.0}{A \code{n_0} by \code{k} dimensional matrix of weight values corresponding to control observations}

\item{T.grad}{A \code{k} dimensional gradient vector of \code{T_t f}}

\item{deg}{degree of local polynomial regression to be used}

\item{kern}{kernel used to calculate conditional variance function;
supports \code{"tri"}, \code{"epa"},
\code{"uni"}, and \code{"gau"}. Default is \code{kern = "epa"}.}

\item{z.1}{a vector of simulated standard normal random variables of length \code{length(y.1) * M} for some \code{M}}

\item{z.0}{a vector of simulated standard normal random variables of length \code{length(y.0) * M} for some \code{M}}

\item{resid.1}{a matrix of residuals with the same dimension of \code{y.1} calculated beforehand;
it can be left unspecified}

\item{resid.0}{a matrix of residuals with the same dimension of \code{y.0} calculated beforehand;
it can be left unspecified}
}
\value{
a list of following components
\describe{
\item{err.sim}{\code{M} dimensional vector of simulated studentized errors}
\item{nmrt}{numerator for err.sim}
\item{dnmnt}{denominator for err.sim}
}
}
\description{
Produce a vector of simulation draws of studentized errors
}
\examples{
x.1 <- x.0 <- seq(from = -1, to = 1, length.out = 500)
y.1 <- x.1^2 + stats::rnorm(500, 0, 0.1)
y.0 <- x.0^2 + stats::rnorm(500, 0, 0.1)
w.1 <- w.0 <- rep(1/500, 500)
z.1 <- rnorm(500 * 500)
z.0 <- rnorm(500 * 500)
stud_err_sim(y.1, y.0, x.1, x.0, w.1, w.0, 1, 1, "tri", z.1, z.0)
}
