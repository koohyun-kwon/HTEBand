% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/quantile.R
\name{sup_quant_sim}
\alias{sup_quant_sim}
\title{Quantile of supremum of a studentized process}
\usage{
sup_quant_sim(
  y.1,
  y.0,
  x.1,
  x.0,
  w.1.arr,
  w.0.arr,
  T.grad.mat,
  level,
  deg,
  kern,
  loo,
  M,
  seed = NULL,
  useloop = TRUE,
  resid.1 = NULL,
  resid.0 = NULL
)
}
\arguments{
\item{y.1}{dependent variable for treated observation; possibly a matrix with \code{nrow} equals the sample size}

\item{y.0}{dependent variable for control observation; possibly a matrix with \code{nrow} equals the sample size}

\item{x.1}{a vector of regressor for treated observation}

\item{x.0}{a vector of regressor for control observation}

\item{w.1.arr}{A \code{n_1} by \code{k} by \code{n.T} dimensional array of weight values corresponding to treated observations}

\item{w.0.arr}{A \code{n_0} by \code{k} by \code{n.T} dimensional array of weight values corresponding to treated observations}

\item{T.grad.mat}{A \code{n.T} by \code{k} dimensional gradient matrix of \code{T_t f} for \code{t} = 1,..., \code{n.T}.}

\item{level}{level of quantile}

\item{deg}{degree of local polynomial regression to be used}

\item{kern}{name of the kernel. Supports \code{"triangle"} and \code{"epa"}.}

\item{loo}{If \code{TRUE}, the leave-one-out version is used; see \code{\link[locpol]{locPolSmootherC}}.}

\item{M}{number of bootstrap simulations}

\item{seed}{seed for the random number generation; default is \code{seed = NULL}.}

\item{useloop}{If \code{TRUE}, the function is implemented by \code{for} loop over \code{t} = 1,..., \code{n.T};
currently only \code{useloop = TRUE} is implemented.}

\item{resid.1}{a matrix of residuals with the same dimension of \code{y.1} calculated beforehand;
it can be left unspecified}

\item{resid.0}{a matrix of residuals with the same dimension of \code{y.0} calculated beforehand;
it can be left unspecified}
}
\value{
a scalar quantile value
}
\description{
Calculates the quantile of supremum of the absolute value of a studentized process
indexed by a index set.
}
\examples{
n <- 500
x <- stats::runif(n, min = -1, max = 1)
y <- x + rnorm(n, 0, 1/4)
n.T <- 10
eval <- seq(from = -0.9, to = 0.9, length.out = n.T)
w <- array(w_get_Hol(y, x, eval, 1, 0.95)$w.mat, dim = c(n, 1, n.T))
sup_quant_sim(y, 0, x, 0, w, array(rep(0, n.T), dim = c(1, 1, n.T)),
rep(1, n.T), 0.95, 1, "triangle", FALSE, 100)
}
